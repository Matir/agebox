// Code generated by mockery v2.5.1. DO NOT EDIT.

package storagemock

import (
	context "context"

	model "github.com/slok/agebox/internal/model"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/slok/agebox/internal/storage"
)

// KeyRepository is an autogenerated mock type for the KeyRepository type
type KeyRepository struct {
	mock.Mock
}

// GetPrivateKey provides a mock function with given fields: ctx
func (_m *KeyRepository) GetPrivateKey(ctx context.Context) (model.PrivateKey, error) {
	ret := _m.Called(ctx)

	var r0 model.PrivateKey
	if rf, ok := ret.Get(0).(func(context.Context) model.PrivateKey); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.PrivateKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPublicKeys provides a mock function with given fields: ctx
func (_m *KeyRepository) ListPublicKeys(ctx context.Context) (*storage.PublicKeyList, error) {
	ret := _m.Called(ctx)

	var r0 *storage.PublicKeyList
	if rf, ok := ret.Get(0).(func(context.Context) *storage.PublicKeyList); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.PublicKeyList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
