// Code generated by mockery v2.5.1. DO NOT EDIT.

package fsmock

import (
	context "context"

	iofs "io/fs"

	mock "github.com/stretchr/testify/mock"
)

// FileManager is an autogenerated mock type for the FileManager type
type FileManager struct {
	mock.Mock
}

// DeleteFile provides a mock function with given fields: ctx, path
func (_m *FileManager) DeleteFile(ctx context.Context, path string) error {
	ret := _m.Called(ctx, path)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadFile provides a mock function with given fields: ctx, path
func (_m *FileManager) ReadFile(ctx context.Context, path string) ([]byte, error) {
	ret := _m.Called(ctx, path)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatFile provides a mock function with given fields: ctx, path
func (_m *FileManager) StatFile(ctx context.Context, path string) (iofs.FileInfo, error) {
	ret := _m.Called(ctx, path)

	var r0 iofs.FileInfo
	if rf, ok := ret.Get(0).(func(context.Context, string) iofs.FileInfo); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iofs.FileInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteFile provides a mock function with given fields: ctx, path, data
func (_m *FileManager) WriteFile(ctx context.Context, path string, data []byte) error {
	ret := _m.Called(ctx, path, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = rf(ctx, path, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
